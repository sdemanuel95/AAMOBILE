package com.tofitsolutions.armasdurasargentinas;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import static android.support.v4.view.ViewCompat.setBackground;

//--------------------------------FALTA VALIDAR QUE TOME LA MP DEL HISTORICO------------------------------------------//

public class EstribadoraActivity extends AppCompatActivity implements TextWatcher {

    Button bt_datosUsuario, bt_principal, bt_okEstribadora, bt_cancelEstribadora;
    EditText et_precintoA, et_precintoB;
    TextView tv_usuario, tv_ayudante, tv_maquina;
    private ArrayList<String> precintos;
    private ArrayList<MateriaPrima> materiaPrima;
    private ArrayList<Maquina> maquinas;
    private ProgressDialog progress;
    private ProgressDialog progresso;
    private String codPreA;
    private String codPreB;


    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        maquinas = new ArrayList<>();
        new PrecintosQuery().execute();
        new traerEstribadoras().execute();
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_estribadora);

        //Inicializo Button

        bt_datosUsuario = (Button)findViewById(R.id.bt_datosUsuario);
        bt_principal = (Button)findViewById(R.id.bt_principal);
        bt_okEstribadora = (Button)findViewById(R.id.bt_okEstribadora);
        bt_cancelEstribadora = (Button)findViewById(R.id.bt_cancelEstribadora);

        //Inicializo EditText
        et_precintoA = (EditText)findViewById(R.id.et_precintoA);
        et_precintoA.addTextChangedListener(this);

        et_precintoB = (EditText)findViewById(R.id.et_precintoB);

        //Inicializo TextView
        tv_usuario = (TextView)findViewById(R.id.tv_usuarioEA);
        tv_ayudante = (TextView)findViewById(R.id.tv_ayudanteEA);
        tv_maquina = (TextView)findViewById(R.id.tv_maquinaEA);

        //Inicializo presintos de la base de datos
        precintos = new ArrayList<>();
        materiaPrima = new ArrayList<>();

        //Ingresa info del Activity -> DatosUsuarioActivity
        Intent intentDatosUsuarios = getIntent();
        final String et_invalidos = intentDatosUsuarios.getStringExtra("et_invalidos");
        final String usuario = intentDatosUsuarios.getStringExtra("usuario");
        final String ayudante = intentDatosUsuarios.getStringExtra("ayudante");
        final String maquina = intentDatosUsuarios.getStringExtra("maquina");

        //Cambia el valor de los TextView
        if (usuario != null) {
            tv_usuario.setText(usuario);
            tv_ayudante.setText(ayudante);
            tv_maquina.setText(maquina);
        }

        //Valida nulidad de los EditText
        if (et_invalidos != null) {
            //Ejecuto QUERY
            new PrecintosQuery().execute();

            et_precintoA.setEnabled(true);
            et_precintoB.setEnabled(true);
            et_precintoA.setInputType(InputType.TYPE_NUMBER_VARIATION_NORMAL);
            et_precintoB.setInputType(InputType.TYPE_NUMBER_VARIATION_NORMAL);

            et_precintoA.setBackground(ContextCompat.getDrawable(EstribadoraActivity.this, R.drawable.border_radius));
            et_precintoB.setBackground(ContextCompat.getDrawable(EstribadoraActivity.this, R.drawable.border_radius));

            if (et_precintoA.isFocusable()) {
                et_precintoA.requestFocus();
                et_precintoA.setHint("Por favor lea el codigo");
                et_precintoA.setHintTextColor(Color.RED);
            }
        }
        // Si es nulo. Devuelve un mensaje
        else {
            et_precintoA.setInputType(InputType.TYPE_NULL);
            et_precintoB.setInputType(InputType.TYPE_NULL);
            et_precintoA.setEnabled(false);
            et_precintoB.setEnabled(false);

            et_precintoA.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    et_precintoA.setEnabled(false);
                    String mensaje = "Ingrese Usuario, Ayudante y Maquina.";
                    Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                    msjToast.show();
                }
            });

            et_precintoB.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    et_precintoB.setEnabled(false);
                    String mensaje = "Ingrese Usuario, Ayudante y Maquina.";
                    Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                    msjToast.show();
                }
            });
        }

        //Redirecciona a DatosUsuario
        bt_datosUsuario.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(EstribadoraActivity.this, DatosUsuarioActivity.class);
                System.out.println("Lista de maquinas en EstribadoraActivity " +  maquinas.size());
                ArrayList<String> a = new ArrayList<>();
                for(Maquina m:maquinas){
                    a.add(m.getMarca());
                }
                i.putExtra("listaMaquinas",a);
                finish();
                startActivity(i);
            }
        });

        //Redirecciona a Principal
        bt_principal.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(EstribadoraActivity.this, PrincipalActivity.class);
                finish();
                startActivity(i);
            }
        });

        //Acepta
        bt_okEstribadora.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(usuario == null || maquina == null){
                    String mensaje = "Error: Debe completar al menos usuario y máquina para continuar.";
                    Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                    msjToast.show();
                    return;

                }
                //Valida los campos "precintoA" y "precintoB"
                String precintoA = et_precintoA.getText().toString();
                String precintoB = "";
                try {
                    precintoB = et_precintoB.getText().toString();
                }
                catch (Exception e) {
                    precintoB = "";
                }
                codPreA = precintoA.substring(10,20);
                codPreB = "";

                // Si se ingresan ambos precintos, se valida que sea el mismo codigo de MP
                if(!precintoB.isEmpty()) {
                    codPreB = precintoB.substring(10, 20);
                    Log.d("entro","codPreA " + codPreA);
                    Log.d("entro","codPreB " + codPreB);
                    // Verifica si los codigo de MP son iguales
                    if(codPreA.equals(codPreB)) {
                        validarPrecinto(precintoA, precintoB, usuario, ayudante, maquina);
                    }
                    else {
                        Log.d("entro","al else");
                        String mensaje = "Error: Los lotes no corresponden al mismo código de material.";
                        Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                        msjToast.show();
                        et_precintoA.setText("");
                        et_precintoB.setText("");
                        et_precintoB.setHint("Precinto 2");
                        et_precintoB.setHintTextColor(getResources().getColor(R.color.colorPrimary));
                        et_precintoA.setHint("Por favor lea el codigo");
                        et_precintoA.setHintTextColor(Color.RED);
                        et_precintoA.requestFocus();
                    }
                }
                // Si se ingresa solo el precinto "A"
                else {
                    validarPrecinto(precintoA, precintoB, usuario, ayudante, maquina);
                }
            }
        });

        //Cancela
        bt_cancelEstribadora.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(EstribadoraActivity.this, ProduccionActivity.class);
                finish();
                startActivity(i);
            }
        });
    }

    @Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
        //Toast.makeText(this, "before change", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {
        //Toast.makeText(this, "on text change", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void afterTextChanged(Editable editable) {
        String nro = editable.toString();
        if (nro.length()==24) {
            //editable.replace(0,editable.length(),"100");
            if (et_precintoA.isFocusable()) {
                et_precintoB.requestFocus();
                et_precintoB.setHint("Por favor lea el codigo");
                et_precintoB.setHintTextColor(Color.RED);
            }
        }
    }

    public void validarPrecinto(String precintoA, String precintoB, String usuario, String ayudante, String maquina) {
        if (precintoA.length() == 24) {
            if (precintoB.length() == 24 || precintoB.length() == 0) {
                if (!precintoA.equals(precintoB)) {
                    precintoA = precintoA.substring(0,10);
                    if(precintoB.length() != 0){
                        precintoB = precintoB.substring(0,10);
                    }
                    if(precintos.contains(precintoA)){
                        if(precintoB.length()!=0) {
                            if(precintos.contains(precintoB)) {
                                Intent i = new Intent(EstribadoraActivity.this, Estribadora2Activity.class);
                                String kgPrecintoA = kgPrecinto(precintoA, materiaPrima);
                                String kgPrecintoB = kgPrecinto(precintoB, materiaPrima);
                                i.putExtra("codPreA", codPreA);
                                i.putExtra("codPreB", codPreB);
                                i.putExtra("precintoA", precintoA);
                                i.putExtra("precintoB", precintoB);
                                i.putExtra("usuario",usuario);
                                i.putExtra("ayudante", ayudante);
                                i.putExtra("maquina", maquina);
                                i.putExtra("kgPrecintoA", kgPrecintoA);
                                i.putExtra("kgPrecintoB", kgPrecintoB);
                                finish();
                                startActivity(i);
                            } else {
                                String mensaje = "Error: El número de precinto 'B' no está cargado o no se encuentra";
                                Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                                msjToast.show();
                                et_precintoB.requestFocus();
                                et_precintoB.setText("");
                                et_precintoB.setHint("Por favor lea el codigo");
                                et_precintoB.setHintTextColor(Color.RED);
                            }
                        }
                        else {
                            Intent i = new Intent(EstribadoraActivity.this, Estribadora2Activity.class);
                            String kgPrecintoA = kgPrecinto(precintoA, materiaPrima);
                            String kgPrecintoB = kgPrecinto(precintoB, materiaPrima);
                            i.putExtra("codPreA", codPreA);
                            i.putExtra("codPreB", codPreB);
                            i.putExtra("precintoA", precintoA);
                            i.putExtra("precintoB", precintoB);
                            i.putExtra("usuario",usuario);
                            i.putExtra("ayudante", ayudante);
                            i.putExtra("maquina", maquina);
                            i.putExtra("kgPrecintoA", kgPrecintoA);
                            i.putExtra("kgPrecintoB", kgPrecintoB);
                            finish();
                            startActivity(i);
                        }
                    }
                    else {
                        String mensaje = "Error: El número de precinto 'A' no está cargado o no se encuentra";
                        Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                        msjToast.show();
                        et_precintoA.requestFocus();
                        et_precintoA.setText("");
                        et_precintoA.setHint("Por favor lea el codigo");
                        et_precintoA.setHintTextColor(Color.RED);
                        et_precintoB.setHint("Precinto 2");
                        et_precintoB.setHintTextColor(getResources().getColor(R.color.colorPrimary));
                    }
                }
                else {
                    String mensaje = "Error: Los números de precinto deben ser distintos";
                    et_precintoB.setText("");
                    Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                    msjToast.show();
                }
            }
            else {
                String mensaje = "Error: El código del precinto B debe contener 24 caracteres";
                et_precintoB.setText("");
                Toast msjToast = Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_LONG);
                msjToast.show();
            }
        }
    }

    public String kgPrecinto(String precinto, ArrayList<MateriaPrima> listaMP) {
        String cantKg = "";
        if (precinto.length() == 0 || precinto.equals(null)) {
            return "KG";
        } else {
            for (MateriaPrima mp : listaMP) {
                String lote = mp.getLote();
                String kg = mp.getCantidad();
                if (precinto.equals(lote)) {
                    cantKg = kg;
                }
            }
            return cantKg + " KG";
        }
    }

    private class PrecintosQuery extends AsyncTask<Void, Integer, Void> {

        private ArrayList<MateriaPrima> materiasPrimaBD;
        private int progreso = 0;

        @Override
        protected void onPreExecute() {
            progress = new ProgressDialog(EstribadoraActivity.this);
            progress.setMessage("Cargando");
            progress.setTitle("Lotes");
            progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
            //progress.show();

            super.onPreExecute();
        }

        @Override
        protected void onProgressUpdate(Integer... values) {
            progress.incrementProgressBy(1);
            if (progreso == progress.getMax()) {
                progress.dismiss();
            }
            super.onProgressUpdate(values);
        }

        @Override
        protected Void doInBackground(Void... params) {

            materiasPrimaBD = new ArrayList<MateriaPrima>();
            Conexion conexion = new Conexion();

            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = conexion.crearConexion();
                Statement stmt = con.createStatement();
                final ResultSet rs = stmt.executeQuery("SELECT * FROM ingresomp");

                rs.last(); //me voy al último
                int sizeRS = rs.getRow(); //guardo el tamaño
                rs.beforeFirst(); // lo dejo donde estaba para recorrerlo

                progress.setMax(sizeRS);

                while (rs.next()) {
                    long id = rs.getInt("ID");
                    String fecha = rs.getString("Fecha");
                    String referencia = rs.getString("Referencia");
                    String material = rs.getString("Material");
                    String descripcion = rs.getString("Descripcion");
                    String cantidad = rs.getString("Cantidad");
                    String umb = rs.getString("UMB");
                    String lote = rs.getString("Lote");
                    String destinatario = rs.getString("Destinatario");
                    String colada = rs.getString("Colada");
                    String pesoPorBalanza = rs.getString("PesoPorBalanza");
                    materiasPrimaBD.add(new MateriaPrima(id, fecha, referencia, material, descripcion, cantidad, umb, lote, destinatario, colada, pesoPorBalanza));
                    progreso++;
                    publishProgress(progreso);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            System.out.println("Cantidad de mp traidas de la DB : " + materiasPrimaBD.size());
            for (int x = 0 ; x < materiasPrimaBD.size(); x++){
                precintos.add(materiasPrimaBD.get(x).getLote());

            }
            materiaPrima = materiasPrimaBD;
            super.onPostExecute(aVoid);
        }
    }


    //NUEVO ASINCSTASK PARA BUSCAR LAS ESTRIBADORAS
    private class traerEstribadoras extends AsyncTask<Void, Integer, Void> {
        private ArrayList<Maquina> listaMaquinas;
        private int progresoDec = 0;

        @Override
        protected void onPreExecute() {
            progresso = new ProgressDialog(EstribadoraActivity.this);
            //progress.setMax(100);
            progresso.setMessage("Cargando");
            progresso.setTitle("Maquinas");
            progresso.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
            //progresso.show();

            super.onPreExecute();
        }

        @Override
        protected void onProgressUpdate(Integer... values) {
            progresso.incrementProgressBy(1);
            if (progresoDec == progresso.getMax()) {
                Log.d("Termino de ejecutar", "el asyncktask");
                progresso.dismiss();
            }
            super.onProgressUpdate(values);
        }

        @Override
        protected Void doInBackground(Void... params) {
            listaMaquinas = new ArrayList<Maquina>();
            Conexion conexion = new Conexion();

            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection con = conexion.crearConexion();


                Statement stmt = con.createStatement();
                final ResultSet rs = stmt.executeQuery("SELECT * FROM maquina where clasificacion = 'estribadora'");
                while (rs.next()) {
                    long id = rs.getInt("ID");
                    String clasificacion = rs.getString("clasificacion");
                    String marca = rs.getString("marca");
                    String modelo = rs.getString("modelo");
                    String tipo_mp = rs.getString("tipo_mp");
                    String diametro_minimo = rs.getString("diametro_minimo");
                    String diametro_maximo = rs.getString("diametro_maximo");
                    String merma = rs.getString("merma");
                    listaMaquinas.add(new Maquina(id, clasificacion, marca, modelo, tipo_mp, diametro_minimo, diametro_maximo, merma));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {

                e.printStackTrace();
            }
            return null;
        }
        @Override
        protected void onPostExecute(Void aVoid) {
            maquinas = listaMaquinas;
            System.out.println(listaMaquinas.size());System.out.println(maquinas.size());
            super.onPostExecute(aVoid);
        }
    }


}
